name: Automated Release Management

on:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write
  pull-requests: read

jobs:
  create-release:
    # Only run when PR is merged (not just closed)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get latest tag
        id: get-latest-tag
        run: |
          # Get the latest tag, or use v0.0.0 if no tags exist
          LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
            echo "No existing tags found, starting from v0.0.0"
          fi
          echo "latest-tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"
      
      - name: Determine version bump
        id: version-bump
        env:
          PR_LABELS: ${{ toJson(github.event.pull_request.labels.*.name) }}
        run: |
          # Parse PR labels to determine version bump type
          # Default to minor if no specific label is found, unless it's a bug fix
          BUMP_TYPE="minor"
          
          if echo "$PR_LABELS" | grep -q "major"; then
            BUMP_TYPE="major"
            echo "Found 'major' label - will perform major version bump"
          elif echo "$PR_LABELS" | grep -q "minor"; then
            BUMP_TYPE="minor"
            echo "Found 'minor' label - will perform minor version bump"
          elif echo "$PR_LABELS" | grep -q "patch"; then
            BUMP_TYPE="patch"
            echo "Found 'patch' label - will perform patch version bump"
          elif echo "$PR_LABELS" | grep -q "bug"; then
            BUMP_TYPE="patch"
            echo "Found 'bug' label - will perform patch version bump"
          else
            echo "No version or bug label found - defaulting to minor version bump"
          fi
          
          echo "bump-type=$BUMP_TYPE" >> $GITHUB_OUTPUT
      
      - name: Calculate new version
        id: new-version
        env:
          LATEST_TAG: ${{ steps.get-latest-tag.outputs.latest-tag }}
          BUMP_TYPE: ${{ steps.version-bump.outputs.bump-type }}
        run: |
          # Remove 'v' prefix for calculation
          VERSION=${LATEST_TAG#v}
          
          # Split version into components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Increment based on bump type
          case "$BUMP_TYPE" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
      
      - name: Create and push tag
        env:
          NEW_VERSION: ${{ steps.new-version.outputs.new-version }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
          git push origin "$NEW_VERSION"
          
          echo "Created and pushed tag: $NEW_VERSION"
      
      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ steps.new-version.outputs.new-version }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
        run: |
          # Create release notes
          cat > release_notes.md << EOF
          ## Release ${NEW_VERSION}
          
          ${PR_BODY}
          
          ---
          
          **Merged PR:** #${PR_NUMBER}
          **Author:** @${PR_AUTHOR}
          EOF
          
          # Create the GitHub release
          gh release create "$NEW_VERSION" \
            --title "$PR_TITLE" \
            --notes-file release_notes.md \
            --latest
          
          echo "Created GitHub release: $NEW_VERSION"
